"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Index_1 = require("./Server/Core/Index");
const index_1 = require("./config/index");
const route = require("./Server/Router");
class Bootstrap {
    Init() {
        let server = new Index_1.WebServer(index_1.AppConfig);
        server.ErrorHandler = (err, req, res, next) => {
            if (req.transaction) {
                req.transaction.rollback();
            }
            let e = err;
            let code = err && e.original ? e.original.code : '';
            if (!code) {
                code = e.code ? e.code : '';
            }
            var out = {
                Data: null,
                PageContext: null,
                Error: { Code: code, Message: err.message, Stack: process.env.NODE_ENV === 'development' ? err.stack : null }
            };
            console.error(err);
            res.status(404).json(out);
        };
        server.Init();
        server.AddStaticFileRouting(index_1.AppConfig.WebBasePath, __dirname + process.env.WEB_UI_PATH, index_1.AppConfig.WebStaticFile);
        server.AddStaticFileRouting(index_1.AppConfig.DocsBasepath, __dirname + index_1.AppConfig.DocsBasepath, index_1.AppConfig.WebStaticFile);
        server.AddApiRouting('/', route);
        this.Server = server;
        return this.Server;
    }
    Start() {
        this.Server.Start();
    }
    Stop() {
        this.Server.Stop();
    }
}
exports.Bootstrap = Bootstrap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Cb290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBaUY7QUFDakYsMENBQTJDO0FBQzNDLHlDQUF5QztBQUd6QztJQUVXLElBQUk7UUFDUCxJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFTLENBQUMsaUJBQVMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFVLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQixFQUFRLEVBQUU7WUFDeEYsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDL0IsQ0FBQztZQUNELElBQUksQ0FBQyxHQUFHLEdBQVUsQ0FBQztZQUNuQixJQUFJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNwRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxDQUFDO1lBQ0QsSUFBSSxHQUFHLEdBQTBCO2dCQUM3QixJQUFJLEVBQUUsSUFBSTtnQkFDVixXQUFXLEVBQUUsSUFBSTtnQkFDakIsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7YUFDaEgsQ0FBQztZQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLG9CQUFvQixDQUFDLGlCQUFTLENBQUMsV0FBVyxFQUFFLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxpQkFBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pILE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBUyxDQUFDLFlBQVksRUFBRSxTQUFTLEdBQUcsaUJBQVMsQ0FBQyxZQUFZLEVBQUUsaUJBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqSCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBQ00sS0FBSztRQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUNNLElBQUk7UUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDSjtBQWxDRCw4QkFrQ0MiLCJmaWxlIjoiQm9vdHN0cmFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViU2VydmVyLCBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnLi9TZXJ2ZXIvQ29yZS9JbmRleCc7XHJcbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJy4vY29uZmlnL2luZGV4JztcclxuaW1wb3J0ICogYXMgcm91dGUgZnJvbSAnLi9TZXJ2ZXIvUm91dGVyJztcclxuaW1wb3J0IHsgQXBpUmVzcG9uc2UsIElCYXNlRHRvIH0gZnJvbSAnLi9TZXJ2ZXIvQ29tbW9uL0luZGV4JztcclxuXHJcbmV4cG9ydCBjbGFzcyBCb290c3RyYXAge1xyXG4gICAgcHVibGljIFNlcnZlcjogV2ViU2VydmVyO1xyXG4gICAgcHVibGljIEluaXQoKTogV2ViU2VydmVyIHtcclxuICAgICAgICBsZXQgc2VydmVyID0gbmV3IFdlYlNlcnZlcihBcHBDb25maWcpO1xyXG4gICAgICAgIHNlcnZlci5FcnJvckhhbmRsZXIgPSAoZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcS50cmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmVxLnRyYW5zYWN0aW9uLnJvbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGUgPSBlcnIgYXMgYW55O1xyXG4gICAgICAgICAgICBsZXQgY29kZSA9IGVyciAmJiBlLm9yaWdpbmFsID8gZS5vcmlnaW5hbC5jb2RlIDogJyc7XHJcbiAgICAgICAgICAgIGlmICghY29kZSkge1xyXG4gICAgICAgICAgICAgICAgY29kZSA9IGUuY29kZSA/IGUuY29kZSA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvdXQ6IEFwaVJlc3BvbnNlPElCYXNlRHRvPiA9IHtcclxuICAgICAgICAgICAgICAgIERhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYWdlQ29udGV4dDogbnVsbCxcclxuICAgICAgICAgICAgICAgIEVycm9yOiB7IENvZGU6IGNvZGUsIE1lc3NhZ2U6IGVyci5tZXNzYWdlLCBTdGFjazogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBlcnIuc3RhY2sgOiBudWxsIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbihvdXQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VydmVyLkluaXQoKTtcclxuICAgICAgICBzZXJ2ZXIuQWRkU3RhdGljRmlsZVJvdXRpbmcoQXBwQ29uZmlnLldlYkJhc2VQYXRoLCBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5XRUJfVUlfUEFUSCwgQXBwQ29uZmlnLldlYlN0YXRpY0ZpbGUpO1xyXG4gICAgICAgIHNlcnZlci5BZGRTdGF0aWNGaWxlUm91dGluZyhBcHBDb25maWcuRG9jc0Jhc2VwYXRoLCBfX2Rpcm5hbWUgKyBBcHBDb25maWcuRG9jc0Jhc2VwYXRoLCBBcHBDb25maWcuV2ViU3RhdGljRmlsZSk7XHJcbiAgICAgICAgc2VydmVyLkFkZEFwaVJvdXRpbmcoJy8nLCByb3V0ZSk7XHJcbiAgICAgICAgdGhpcy5TZXJ2ZXIgPSBzZXJ2ZXI7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuU2VydmVyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuU2VydmVyLlN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgU3RvcCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLlNlcnZlci5TdG9wKCk7XHJcbiAgICB9XHJcbn1cclxuIl19
